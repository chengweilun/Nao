# Choregraphe bezier export in Python.
from naoqi import ALProxy
def drop(IP,PORT):
    names = list()
    times = list()
    keys = list()

    names.append("HeadPitch")
    times.append([1.8, 4, 6.6, 9.2])
    keys.append([[-0.176453, [3, -0.6, 0], [3, 0.733333, 0]], [-0.168741, [3, -0.733333, 0], [3, 0.866667, 0]], [-0.193326, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.193326, [3, -0.866667, 0], [3, 0, 0]]])

    names.append("HeadYaw")
    times.append([1.8, 4, 6.6, 9.2])
    keys.append([[0.00149202, [3, -0.6, 0], [3, 0.733333, 0]], [0, [3, -0.733333, 0.00117179], [3, 0.866667, -0.00138485]], [-0.0061779, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.0061779, [3, -0.866667, 0], [3, 0, 0]]])

    names.append("LAnklePitch")
    times.append([1.8, 4, 6.6, 9.2])
    keys.append([[0.0996681, [3, -0.6, 0], [3, 0.733333, 0]], [0.0996681, [3, -0.733333, 0], [3, 0.866667, 0]], [0.098134, [3, -0.866667, 0], [3, 0.866667, 0]], [0.098134, [3, -0.866667, 0], [3, 0, 0]]])

    names.append("LAnkleRoll")
    times.append([1.8, 4, 6.6, 9.2])
    keys.append([[-0.122678, [3, -0.6, 0], [3, 0.733333, 0]], [-0.117207, [3, -0.733333, 0], [3, 0.866667, 0]], [-0.121144, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.121144, [3, -0.866667, 0], [3, 0, 0]]])

    names.append("LElbowRoll")
    times.append([1.8, 4, 6.6, 9.2])
    keys.append([[-0.421808, [3, -0.6, 0], [3, 0.733333, 0]], [-0.423399, [3, -0.733333, 0.00159174], [3, 0.866667, -0.00188115]], [-0.665714, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.654976, [3, -0.866667, 0], [3, 0, 0]]])

    names.append("LElbowYaw")
    times.append([1.8, 4, 6.6, 9.2])
    keys.append([[-1.21037, [3, -0.6, 0], [3, 0.733333, 0]], [-1.23142, [3, -0.733333, 0], [3, 0.866667, 0]], [-1.02936, [3, -0.866667, 0], [3, 0.866667, 0]], [-1.02936, [3, -0.866667, 0], [3, 0, 0]]])

    names.append("LHand")
    times.append([1.8, 4, 6.6, 9.2])
    keys.append([[0.2876, [3, -0.6, 0], [3, 0.733333, 0]], [0.27, [3, -0.733333, 0.00415556], [3, 0.866667, -0.00491111]], [0.2604, [3, -0.866667, 0], [3, 0.866667, 0]], [0.7336, [3, -0.866667, 0], [3, 0, 0]]])

    names.append("LHipPitch")
    times.append([1.8, 4, 6.6, 9.2])
    keys.append([[0.136568, [3, -0.6, 0], [3, 0.733333, 0]], [0.136568, [3, -0.733333, 0], [3, 0.866667, 0]], [0.144238, [3, -0.866667, 0], [3, 0.866667, 0]], [0.144238, [3, -0.866667, 0], [3, 0, 0]]])

    names.append("LHipRoll")
    times.append([1.8, 4, 6.6, 9.2])
    keys.append([[0.093616, [3, -0.6, 0], [3, 0.733333, 0]], [0.0895293, [3, -0.733333, 0], [3, 0.866667, 0]], [0.093616, [3, -0.866667, 0], [3, 0.866667, 0]], [0.093616, [3, -0.866667, 0], [3, 0, 0]]])

    names.append("LHipYawPitch")
    times.append([1.8, 4, 6.6, 9.2])
    keys.append([[-0.159494, [3, -0.6, 0], [3, 0.733333, 0]], [-0.152639, [3, -0.733333, 0], [3, 0.866667, 0]], [-0.159494, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.159494, [3, -0.866667, 0], [3, 0, 0]]])

    names.append("LKneePitch")
    times.append([1.8, 4, 6.6, 9.2])
    keys.append([[-0.0859461, [3, -0.6, 0], [3, 0.733333, 0]], [-0.0859461, [3, -0.733333, 0], [3, 0.866667, 0]], [-0.0890141, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.0890141, [3, -0.866667, 0], [3, 0, 0]]])

    names.append("LShoulderPitch")
    times.append([1.8, 4, 6.6, 9.2])
    keys.append([[1.46646, [3, -0.6, 0], [3, 0.733333, 0]], [0.76587, [3, -0.733333, 0.102919], [3, 0.866667, -0.121632]], [0.644238, [3, -0.866667, 0.00460194], [3, 0.866667, -0.00460194]], [0.639636, [3, -0.866667, 0], [3, 0, 0]]])

    names.append("LShoulderRoll")
    times.append([1.8, 4, 6.6, 9.2])
    keys.append([[0.164096, [3, -0.6, 0], [3, 0.733333, 0]], [0.000556231, [3, -0.733333, 0.0569497], [3, 0.866667, -0.0673042]], [-0.208666, [3, -0.866667, 0.00460219], [3, 0.866667, -0.00460219]], [-0.213268, [3, -0.866667, 0], [3, 0, 0]]])

    names.append("LWristYaw")
    times.append([1.8, 4, 6.6, 9.2])
    keys.append([[0.0827939, [3, -0.6, 0], [3, 0.733333, 0]], [0.0729778, [3, -0.733333, 0], [3, 0.866667, 0]], [0.354312, [3, -0.866667, 0], [3, 0.866667, 0]], [0.354312, [3, -0.866667, 0], [3, 0, 0]]])

    names.append("RAnklePitch")
    times.append([1.8, 4, 6.6, 9.2])
    keys.append([[0.0874801, [3, -0.6, 0], [3, 0.733333, 0]], [0.0874801, [3, -0.733333, 0], [3, 0.866667, 0]], [0.093616, [3, -0.866667, 0], [3, 0.866667, 0]], [0.093616, [3, -0.866667, 0], [3, 0, 0]]])

    names.append("RAnkleRoll")
    times.append([1.8, 4, 6.6, 9.2])
    keys.append([[0.121228, [3, -0.6, 0], [3, 0.733333, 0]], [0.115625, [3, -0.733333, 0], [3, 0.866667, 0]], [0.121228, [3, -0.866667, 0], [3, 0.866667, 0]], [0.121228, [3, -0.866667, 0], [3, 0, 0]]])

    names.append("RElbowRoll")
    times.append([1.8, 4, 6.6, 9.2])
    keys.append([[0.42496, [3, -0.6, 0], [3, 0.733333, 0]], [0.428011, [3, -0.733333, -0.00305082], [3, 0.866667, 0.00360551]], [0.66273, [3, -0.866667, 0], [3, 0.866667, 0]], [0.661196, [3, -0.866667, 0], [3, 0, 0]]])

    names.append("RElbowYaw")
    times.append([1.8, 4, 6.6, 9.2])
    keys.append([[1.21182, [3, -0.6, 0], [3, 0.733333, 0]], [1.23219, [3, -0.733333, 0], [3, 0.866667, 0]], [1.0262, [3, -0.866667, 0], [3, 0.866667, 0]], [1.0262, [3, -0.866667, 0], [3, 0, 0]]])

    names.append("RHand")
    times.append([1.8, 4, 6.6, 9.2])
    keys.append([[0.2852, [3, -0.6, 0], [3, 0.733333, 0]], [0.27054, [3, -0.733333, 0.00470555], [3, 0.866667, -0.00556111]], [0.2544, [3, -0.866667, 0], [3, 0.866667, 0]], [0.7372, [3, -0.866667, 0], [3, 0, 0]]])

    names.append("RHipPitch")
    times.append([1.8, 4, 6.6, 9.2])
    keys.append([[0.141086, [3, -0.6, 0], [3, 0.733333, 0]], [0.141086, [3, -0.733333, 0], [3, 0.866667, 0]], [0.133416, [3, -0.866667, 0], [3, 0.866667, 0]], [0.133416, [3, -0.866667, 0], [3, 0, 0]]])

    names.append("RHipRoll")
    times.append([1.8, 4, 6.6, 9.2])
    keys.append([[-0.091998, [3, -0.6, 0], [3, 0.733333, 0]], [-0.0880431, [3, -0.733333, 0], [3, 0.866667, 0]], [-0.0919981, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.0919981, [3, -0.866667, 0], [3, 0, 0]]])

    names.append("RHipYawPitch")
    times.append([1.8, 4, 6.6, 9.2])
    keys.append([[-0.159494, [3, -0.6, 0], [3, 0.733333, 0]], [-0.152639, [3, -0.733333, 0], [3, 0.866667, 0]], [-0.159494, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.159494, [3, -0.866667, 0], [3, 0, 0]]])

    names.append("RKneePitch")
    times.append([1.8, 4, 6.6, 9.2])
    keys.append([[-0.0889301, [3, -0.6, 0], [3, 0.733333, 0]], [-0.0889301, [3, -0.733333, 0], [3, 0.866667, 0]], [-0.0904641, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.0904641, [3, -0.866667, 0], [3, 0, 0]]])

    names.append("RShoulderPitch")
    times.append([1.8, 4, 6.6, 9.2])
    keys.append([[1.45427, [3, -0.6, 0], [3, 0.733333, 0]], [0.765868, [3, -0.733333, 0.102847], [3, 0.866667, -0.121546]], [0.644322, [3, -0.866667, 0], [3, 0.866667, 0]], [0.644322, [3, -0.866667, 0], [3, 0, 0]]])

    names.append("RShoulderRoll")
    times.append([1.8, 4, 6.6, 9.2])
    keys.append([[-0.17185, [3, -0.6, 0], [3, 0.733333, 0]], [-0.000558504, [3, -0.733333, -0.0466379], [3, 0.866667, 0.0551175]], [0.133416, [3, -0.866667, 0], [3, 0.866667, 0]], [0.11194, [3, -0.866667, 0], [3, 0, 0]]])

    names.append("RWristYaw")
    times.append([1.8, 4, 6.6, 9.2])
    keys.append([[0.0689882, [3, -0.6, 0], [3, 0.733333, 0]], [0.0659326, [3, -0.733333, 0.00305555], [3, 0.866667, -0.0036111]], [-0.358998, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.358998, [3, -0.866667, 0], [3, 0, 0]]])

    try:
      # uncomment the following line and modify the IP if you use this script outside Choregraphe.
      motion = ALProxy("ALMotion", IP, 9559)
      motion.angleInterpolationBezier(names, times, keys)
    except BaseException, err:
      print err
